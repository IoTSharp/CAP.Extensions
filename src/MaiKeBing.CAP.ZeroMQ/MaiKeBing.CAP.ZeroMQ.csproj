<Project Sdk="Microsoft.NET.Sdk">
  
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <AssemblyName>MaiKeBing.CAP.ZeroMQ</AssemblyName>
    <PackageTags>;ZeroMQ;NetMQ;dotnetcore;CAP;EventBus;MicroService</PackageTags>
  </PropertyGroup>
  
  <PropertyGroup>
    <DocumentationFile>bin\$(Configuration)\netstandard2.0\MaiKeBing.CAP.ZeroMQ.xml</DocumentationFile>
    <NoWarn>1701;1702;1705;CS1591</NoWarn>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>1.0.1</Version>
    <Authors>maikebing</Authors>
    <PackageLicenseExpression></PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/maikebing/CAP.Extensions</PackageProjectUrl>
    <RepositoryUrl>https://github.com/maikebing/CAP.Extensions</RepositoryUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>cap_zeromq.png</PackageIcon>
    <Copyright>© MaiKeBing 2020</Copyright>
    <Description>ZeroMQ（也称为 ØMQ，0MQ 或 zmq）是一个可嵌入的网络通讯库（对 Socket 进行了封装）。 它提供了携带跨越多种传输协议（如：进程内，进程间，TCP 和多播）的原子消息的 sockets 。 有了ZeroMQ，我们可以通过发布-订阅、任务分发、和请求-回复等模式来建立 N-N 的 socket 连接。 ZeroMQ 的异步 I / O 模型为我们提供可扩展的基于异步消息处理任务的多核应用程序。当前组件使用了NetMQ 为CAP提供了 发布-订阅， 推送-拉取两种消息模式。 示例请参见Sample.ZeroMQ.InMemory， 当测试 推送-拉取 消息模式时 ， 可以启动 Sample.ConsoleApp 可以测试负载均衡。</Description>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="DotNetCore.CAP" Version="3.1.0" />
    <PackageReference Include="NetMQ" Version="4.0.1.4" />
  </ItemGroup>
  
  <ItemGroup>
    <None Include="..\..\docs\cap_zeromq.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
  </ItemGroup>

</Project>